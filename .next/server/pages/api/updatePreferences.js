"use strict";(()=>{var e={};e.id=161,e.ids=[161],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},5212:(e,t,r)=>{r.r(t),r.d(t,{config:()=>l,default:()=>d,routeModule:()=>c});var n={};r.r(n),r.d(n,{default:()=>u});var a=r(1802),o=r(7153),i=r(6249);let s=new(r(3524)).PrismaClient;async function u(e,t){if("POST"!==e.method)return t.status(405).json({message:"Method not allowed"});try{let{region:r,sectionid:n,minPrice:a,maxPrice:o,userId:i}=e.body;console.log("req.body1111111111",e.body);let u=await s.preference.upsert({where:{userId:i},update:{region:r,sectionid:n,minPrice:a,maxPrice:o},create:{userId:i,region:r,sectionid:n,minPrice:a,maxPrice:o}});t.status(200).json(u)}catch(e){console.error("Error updating preferences:",e),t.status(500).json({message:"Error updating preferences"})}finally{await s.$disconnect()}}let d=(0,i.l)(n,"default"),l=(0,i.l)(n,"config"),c=new a.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/updatePreferences",pathname:"/api/updatePreferences",bundlePath:"",filename:""},userland:n})},7153:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},1802:(e,t,r)=>{e.exports=r(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=t(t.s=5212);module.exports=r})();